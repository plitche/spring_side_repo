* 빌드 관리 도구
    - 프로젝트에서 필요한 xml, properties, jar 파일등를 자동으로 인식하여 빌드해주는 도구
    - 소스 코드를 컴파일, 테스트, 정적분석 등을 하여 실행가능한 앱으로 빌드해줌
    - 프로젝트 정보 관리, 테스트 빌드, 배포 등의 작업을 진행
    - 외부 라이브러리를 참조하여 자동으로 다운로드 및 업데이트의 관리

* 메이븐(Maven)
    - 자바의 대표적인 관리 도구였던 Ant를 대체하기 위해 개발됨
    - 프로젝트의 외부 라이브러리를 쉽게 참조할 수 있게 pom.xml 파일로 명시하여 관리
    - 참조한 외부 라이브러리에 연관된 다른 라이브러리도 자동으로 관리됨

    - 사용하는 이유
        > 기존의 Ant는 빌드의 기능만 가지고 있음
        > 자동으로 라이브러리를 관리해주는 기능이 추가
        > 다운받아 사용하던 라이브러리에 변동 사항이 있으면 자동으로 업데이트 하여 적용됨

    - 대표 태그 설명
        > modelVersion : maven 버전
        > groupId : 프로젝트 그룹 id를 뜻하며, 일반적으로는 대표하는 사이트 도메인을 역순으로 적어 사용
        > artifactId : groupId외에 다른 프로제트와는 구분될 수 있는 프로젝트의 id를 작성
        > version : 프로젝트의 버전을 의미하며 개발 단계에 따라 구분하여 작성
        > name : 프로젝트의 이름
        > description : 해당 프로젝트의 간략한 설명
        > properties : pom.xml 파일 내에서 빈번하게 사용되는 중복 상수를 정의하는 영역, 해당 영역의 상수를 사용하기 위해서는 ${태그명} 의 형태로 사용하면 됨
        > dependendies : 해당 프로젝트에서 의존성을 가지고 사용하는 라이브러리를 정의하는 영역, 각 라이브러리마다 <dependency> 태그를 사용하여 구분
        > build : 프로젝트 빌드와 관련된 정보를 설정하는 영역

* 그래들(Gradle)
    - Groovy 스크립트를 활용한 빌드 관리 도구
    - 안드로이드 프로젝트의 표준 빌드 시스템 채택
    - 멀티 프로젝트의 빌드에 최적화 하여 설계됨
    - Maven에 비해 더 빠른 처리속도와 간결한 구성이 가능함

    - 비교
        > Gradle에 비해 Maven의 성능이 떨어짐
        > Maven에 비해 Gradle이 대규모 프로젝트에서의 성능이 좋음
        > Maven : pom.xml  Gradle : build.gradle
        > Gradle은 설치없이 사용할 수 있다.(Gradle Wrapper)

    - 대표 용어
        > repositories : 라이브러리가 저장된 위치 등 설정
        > mavenCentral : 기본 Maven Repository
        > dependencies : 라이브러리 사용을 위한 의존성 설정

* URL
    - https://mvnrepository.com/
