* Interceptor
  - Integerceptor(인터셉터)는 DispatcherServlet과 컨트롤러 사이에서 요청(request)를 가로채는 역할을 수행
  - 인터셉터를 사용하면 기존의 로직을 수정하지 않고 비즈니스 로직 전후에서 특정 기능을 수행할 수 있음
  - 인터셉터를 구현하기 위해 HandlerInterceptor를 사용

* HandlerInterceptor 구조
  public interface HandlerInterceptor {
    default boolean preHandle(HttpServletRequest request, HttpServletResponse response
                              , Object handler) throws Exception {
      return true;
    }

    default void postHandle(HttpServletRequest request, HttpServletResponse response
                            , Object handler, @Nullable ModelAndView modelAndView) throws Exception {
    }

    default void afterCompletion(HttpServletRequest request, HttpServletResponse response
                                , Object handler, @Nullable ModelAndView modelAndView) throws Exception {
    }
  }

* 역할
  - preHandle
    > 컨트롤러로 요청이 가기 전에 수행할 코드를 작성하는 메소드
    > return 값이 true일 경우 컨트롤러로 요청을 전달하고 false일 경우 컨트롤러로 전달하지 않음
    > Object handler : 요청을 전달할 컨트롤러 객체가 담겨 있음

  - postHandle
    > 컨트롤러의 로직이 수행된 이후 View가 렌더링 되기 전에 수행할 코드를 작성하는 메소드

  - afterCompletion
    > View가 렌더링 된 후에 실행되는 메소드

* HttpServletRequest와 HttpServletResponse
  - WAS가 요청을 받으면 HttpServletRequest와 HttpServletResponse 객체를 생성하여 웹 애플리케이션으로 전달
  - HttpServletRequest
    > Http 프로토콜의 Request 정보를 서블릿으로 전달하기 위해 사용되는 객체
    > Header, Parameter, Cookie, URL, URI 등의 정보를 가짐
    > Body의 값을 읽기 위한 메소드를 가짐

  - HttpServletResponse
    > 요청에 대한 응답값을 담기 위한 객체
    > Content-Type이나 응답 코드, 메시지를 가짐

* 구현
  - WebMvcConfigurer 구현체 작성
    @Configuration
    public class WebMvcConfig implements WebMvcConfigurer {

      @Override
      public void addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(new HttpInterceptor())
                .addPathPatterns("/**")           // 해당 인터셉터가 동작할 경로 설정
                .excludePathPatterns("/hello");   // 설정된 경로는 인터셉터 예외 설정
      }
    }
